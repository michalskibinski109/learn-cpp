"use strict";(self.webpackChunkcpp_learn=self.webpackChunkcpp_learn||[]).push([[958],{1351:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"How compiler works?","href":"/learn-cpp/docs/compiler","docId":"compiler","unlisted":false},{"type":"link","label":"Linker","href":"/learn-cpp/docs/linker","docId":"linker","unlisted":false},{"type":"link","label":"Variables","href":"/learn-cpp/docs/variables","docId":"variables","unlisted":false},{"type":"link","label":"Functions","href":"/learn-cpp/docs/functions","docId":"functions","unlisted":false},{"type":"link","label":"Header files","href":"/learn-cpp/docs/headers","docId":"headers","unlisted":false},{"type":"link","label":"Debugging","href":"/learn-cpp/docs/memory","docId":"memory","unlisted":false},{"type":"link","label":"Raw pointers","href":"/learn-cpp/docs/pointers","docId":"pointers","unlisted":false},{"type":"link","label":"References in C++","href":"/learn-cpp/docs/references","docId":"references","unlisted":false},{"type":"link","label":"Classes and structures","href":"/learn-cpp/docs/classes_and_structs","docId":"classes_and_structs","unlisted":false},{"type":"link","label":"Visibility in classes","href":"/learn-cpp/docs/visibility","docId":"visibility","unlisted":false},{"type":"link","label":"Enums","href":"/learn-cpp/docs/enums","docId":"enums","unlisted":false},{"type":"link","label":"Interfaces in C++","href":"/learn-cpp/docs/interfaces","docId":"interfaces","unlisted":false},{"type":"link","label":"Strings and string literals","href":"/learn-cpp/docs/strings","docId":"strings","unlisted":false},{"type":"link","label":"Maps","href":"/learn-cpp/docs/maps","docId":"maps","unlisted":false}]},"docs":{"classes_and_structs":{"id":"classes_and_structs","title":"Classes and structures","description":"Definition","sidebar":"tutorialSidebar"},"compiler":{"id":"compiler","title":"How compiler works?","description":"A compiler is a program that translates human-readable source code into computer-executable machine code. Here\'s a simplified overview of how it works:","sidebar":"tutorialSidebar"},"enums":{"id":"enums","title":"Enums","description":"Enums, short for enumerations, are a way of defining a type in C++ that consists of named constants. Enums are used when we know all possible values a variable can have, and we want to restrict it to those values to avoid errors and make the code more readable.","sidebar":"tutorialSidebar"},"functions":{"id":"functions","title":"Functions","description":"Passing class objects to functions","sidebar":"tutorialSidebar"},"headers":{"id":"headers","title":"Header files","description":"Why do we need header files?","sidebar":"tutorialSidebar"},"interfaces":{"id":"interfaces","title":"Interfaces in C++","description":"In C++, interfaces are implemented using abstract classes, defined by having at least one pure virtual function. These classes cannot be instantiated directly and must be extended by other classes. Interfaces enforce that all derived classes implement specific behaviors.","sidebar":"tutorialSidebar"},"linker":{"id":"linker","title":"Linker","description":"Linker is a program that takes one or more object (.obj) files generated by a compiler and combines them into a single executable program.","sidebar":"tutorialSidebar"},"maps":{"id":"maps","title":"Maps","description":"Maps in C++ are associative containers that store elements formed by a combination of a key value and a mapped value. The key value is used to uniquely identify the element, and the mapped value is the content associated with the key. Maps are a part of the Standard Template Library (STL) and are very useful for efficiently searching, inserting, and deleting elements based on keys.","sidebar":"tutorialSidebar"},"memory":{"id":"memory","title":"Debugging","description":"Why there are a lot of CC values when we debug the program?","sidebar":"tutorialSidebar"},"pointers":{"id":"pointers","title":"Raw pointers","description":"Pointer is just memory address of a variable.","sidebar":"tutorialSidebar"},"references":{"id":"references","title":"References in C++","description":"What is a reference?","sidebar":"tutorialSidebar"},"strings":{"id":"strings","title":"Strings and string literals","description":"Char","sidebar":"tutorialSidebar"},"variables":{"id":"variables","title":"Variables","description":"- Declaration: A variable declaration provides assurance to the compiler that there exists a variable with the given type and name so that the compiler can proceed for further compilation without requiring the complete detail about the variable. A variable declaration has its meaning at the time of compilation only, the compiler needs actual variable declaration at the time of linking the program.","sidebar":"tutorialSidebar"},"visibility":{"id":"visibility","title":"Visibility in classes","description":"In C++, classes have three types of visibility: public, protected, and private. These keywords determine how class members are accessible from outside the class.","sidebar":"tutorialSidebar"}}}}')}}]);