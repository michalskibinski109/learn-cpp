"use strict";(self.webpackChunkcpp_learn=self.webpackChunkcpp_learn||[]).push([[820],{5854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=t(4848),o=t(8453);const a={},i="\ud83d\udd12 Const Keyword",c={id:"const",title:"\ud83d\udd12 Const Keyword",description:"\ud83d\udd22 Variables",source:"@site/docs/14-const.md",sourceDirName:".",slug:"/const",permalink:"/learn-cpp/docs/const",draft:!1,unlisted:!1,editUrl:"https://github.com/michalskibinski109/learn-cpp/tree/main/docs/14-const.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd04 Ternary Operators",permalink:"/learn-cpp/docs/ternary_operators"},next:{title:"\ud83d\uddc2\ufe0f Enums",permalink:"/learn-cpp/docs/enums"}},r={},l=[{value:"\ud83d\udd22 Variables",id:"-variables",level:2},{value:"\ud83c\udff7\ufe0f Classes and Declarations",id:"\ufe0f-classes-and-declarations",level:2},{value:"\ud83d\udd0d Wild Example",id:"-wild-example",level:3},{value:"\ud83d\udd04 Mutable Keyword",id:"-mutable-keyword",level:3}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"-const-keyword",children:"\ud83d\udd12 Const Keyword"}),"\n",(0,s.jsx)(n.h2,{id:"-variables",children:"\ud83d\udd22 Variables"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"const"})," keyword is used to declare a constant variable. A constant variable is a variable whose value cannot be changed after it has been assigned. The syntax for declaring a constant variable is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const int x = 5;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'int main()\n{\n    const int AGE = 20;\n    int* a = new int;\n    *a = 10;\n    a = &AGE; // a value of type "const int *" cannot be assigned to an entity of type "int *"\n    // bypassing it\n    a = (int*)&AGE; // just reassigning the pointer to the address of AGE\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Keep in mind that if you create ",(0,s.jsx)(n.code,{children:"const *int pointer"})," you can't change the value of the pointer, but you can change the value of the variable it points to."]}),"\n",(0,s.jsx)(n.admonition,{title:"\ud83d\udccb Order of const",type:"note",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"const int* x = 5; // x is a pointer to a constant integer\nint const* x = 5; // same as above\nint* const x = 5; // x is a constant pointer to an integer (you can't change the address of x)\nconst int* const x = 5; // x is a constant pointer to a constant integer\n"})})}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-classes-and-declarations",children:"\ud83c\udff7\ufe0f Classes and Declarations"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"const"})," keyword can also be used to declare that a function does not modify the object it is called on. This is known as a ",(0,s.jsx)(n.code,{children:"const"})," member function. The syntax for declaring a ",(0,s.jsx)(n.code,{children:"const"})," member function is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyClass {\npublic:\n    void foo() const {\n        // Function body\n    }\n};\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"\ud83d\udca1 Why should you use const in member functions?",type:"tip",children:(0,s.jsx)(n.p,{children:"It allows the compiler to catch errors where the function modifies the object it is called on. It also allows the compiler to optimize the code by caching the result of the function call."})}),"\n",(0,s.jsx)(n.h3,{id:"-wild-example",children:"\ud83d\udd0d Wild Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyClass {\n    const int* const foo() const {\n        return 5;\n    }\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["What does this code do? It returns a constant pointer to a constant integer. The function ",(0,s.jsx)(n.code,{children:"foo"})," is a ",(0,s.jsx)(n.code,{children:"const"})," member function, which means it does not modify the object it is called on. The return type of the function is a constant pointer to a constant integer, which means that the pointer and the integer it points to cannot be modified."]}),"\n",(0,s.jsx)(n.h3,{id:"-mutable-keyword",children:"\ud83d\udd04 Mutable Keyword"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"mutable"})," keyword can be used to declare that a member variable can be modified in a ",(0,s.jsx)(n.code,{children:"const"})," member function. This is useful when you have a member variable that needs to be modified in a ",(0,s.jsx)(n.code,{children:"const"})," member function, e.g., for debugging purposes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"class MyClass {\nprivate:\n    mutable int x;\npublic:\n    void foo() const {\n        x = 5; // This is allowed because x is mutable\n    }\n};\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);